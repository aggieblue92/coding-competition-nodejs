----------- USU ACM Coding Competition Website -----------
---------------   Prototype V0.2 - "Goron" ---------------

----------- General Project Makeup -----------

	The JS file that runs at startup is /server.js. Server performs a couple of functions. First it, sets up websockets (under /sockets/socket_router.js) that are required for the server to run. After that, it sets up an HTTP server. All requests are forwarded out through the /router.js file.

	Routers are defined by a function route(pathname, response, request) object, and can be nested by 'directories' in the 'path' to the website requested. For example, the request for '/competitions/c1/p1/submit' would pass through the 'competitions' router (competitions/c1), 'problems' router (p1) and 'submission' router (submit). The routers each router is capable of forwarding to is listed at the beginning of the file.

/
	db_structure.sql: SQL file to set up database structure for Goron database
	CompetitionData.sql: Some initial data to pass into the database.
	router.js: Routes requests from server.js out to Goron subsystems
	server.js: Creates http server object, sets up websockets.
	SubmissionServer64VM.tar.gz: Contains VirtualBox image of competition server.
	/admin
		---Administrative functionality will go here
		admin_router.js: Router for administrative functionality
	/competition
		competition.js: Contains router and authentication functionality for competitions
		scoreboard.js: Contains code to generate a scoreboard page for a competition
	/dao
		--- ALL SQL calls should be in here. ALL OF THEM.
		--- <TableName>_dao.js: Contains methods to get/put/update data in database
	/data*
		comparison_programs: Contains 64 bit binaries for comparison programs
		frags: Contains HTML fragments that are used by static pages
		problem_descriptions: Descriptions of problems (HTML, PDF, PNG, TXT) go here
		sandbox: Can be used by Goron subsystems on the fly as a temporary folder
		submits: Contains source code of user submissions
		test_cases: Contains test case data (as indexed in SQL table 'TestCase')
	/node_modules
		--- Dependencies
	/page_builders
		--- Dynamically built pages use these classes to create HTML data
		competition_page.js: Create a page to be used in a competition
		error_page.js: Error page creation
		generic_page.js: Generic pages (index, about, rules...)
		problem_page.js: Creates a page for a specific problem
	/problem
		problem.js: Router for anything under /competition/c##/p##...
		submit.js: Creates a submission page for a problem, with form.
	/public
		--- Public, static data (Bootstrap, jQuery, favicon...)
		--- Anything in this directory is accessible via <host>/filename
	/sockets
		--- Manages websockets for client/server communication
		result_listener_socket.js: Socket that alerts clients of a successful submission result (AC, WA... see below)
		server_time_socket.js: Reports server clock time. Unused.
		socket_router.js: Manages creation of new sockets
		time_remaining_socket.js: Socket that reports number of seconds remaining in a competition
		time_until_start_socket.js: Socket that reports number of seconds until a comeptition begins
	/statics
		--- JS files for static web pages. Probably will be removed.
	/submission
		--- Handles all submission-related things.
		judge.js: Receive submission data, forward information to judge_request, accept result and report result to user.
		judge_request.js: Packages submission information (test cases, source code, additional data in JSON file, etc.) and sends it to submission server.
		submission_page.js: Show the 'submissions' page for a problem, along with socket listener to listen for results
	/submission_server
		--- Source code for submission server. Does not run on main server - runs on VM in SubmissionServer64VM.tar.gz
		/bin
			--- Contains binaries for certain judge systems
		/node_modules
			--- Dependencies
		/sandbox
			--- Temporary folder, submissions can be loaded and judged here
			server.js: Main file for the server, contains http object
			owl_router.js: Routes server requests to appropriate language system
			<lang_name>.js: Contains functionality to judge a submission in a certain language
	/user
		--- User functionality (login, logout, register)
		user.js: Router for user functinality

* The Data folder contains raw data used by competition framework. This will be wrapped by administrative functionality in the future, right now it's all manual.


-----------Socket Namespaces-----------

-COMPETITION
--CT##: Time until competition ## ends (ongoing competition)
--CS##: Time until competition ## begins (upcoming competition)
--PR: Problem Results. Responsible for sending freshly solved submission results
+++ submission_finished
-ADMIN
--NCV##: Validates a new competition, ## being a unique number for the session

-----------Problem results-----------
--TLE: Time Limit Exceeded
--BE: Build Error (do not dock)
--RE: Runtime Error
--WA: Wrong answer
--IE: Internal Error (do not dock)
--Q: Result Pending
--AC: Answer Correct